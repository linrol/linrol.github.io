<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>罗林的博客</title>
  <icon>https://www.gravatar.com/avatar/376e4b2ef5d8c4ef37cc43f6458583b0</icon>
  <subtitle>撸码、撩妹都很厉害的程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.alinkeji.com/"/>
  <updated>2019-11-16T03:27:56.005Z</updated>
  <id>http://blog.alinkeji.com/</id>
  
  <author>
    <name>linrol</name>
    <email>18883754124@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次线上服务器CPU占用率极高的排查过程</title>
    <link href="http://blog.alinkeji.com/2018/09/22/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8A%E6%9C%8D%E5%8A%A1%E5%99%A8CPU%E5%8D%A0%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E7%9A%84%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B/"/>
    <id>http://blog.alinkeji.com/2018/09/22/记一次线上服务器CPU占用率过高的排查过程/</id>
    <published>2018-09-21T20:18:55.000Z</published>
    <updated>2019-11-16T03:27:56.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>   今天被运维告知线上payment项目CPU占用率极高的警告通知，让我们开发自己排查问题,然后开始了排查问题之旅…<a id="more"></a></p><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="进程和线程追踪"><a href="#进程和线程追踪" class="headerlink" title="进程和线程追踪"></a>进程和线程追踪</h2><ul><li>执行top命令按CPU占用率排序，得到进程PID，如下图，PS:此图为下来的模拟场景所以CPU占用率并不高，实际线上查出来的进程PID为16485<br><img src="/images/top-commond.png" alt="img"></li></ul><ul><li><p>根据进程PID查找最消耗CPU的线程PID为1594</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -Hp pid</span><br></pre></td></tr></table></figure><p><img src="/images/top-thread-command.png" alt="img"></p><h2 id="分析dump文件"><a href="#分析dump文件" class="headerlink" title="分析dump文件"></a>分析dump文件</h2></li><li><p>执行以下命令获取thread dump文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./jstack 1594 -&gt; 1594-dump.log</span><br></pre></td></tr></table></figure></li><li><p>将线程追踪步骤查出的PID十进制1594转为十六进制的线程PID 63a,查找1594-dump.log线程堆栈信息，最终追踪到具体的业务位置<br><img src="/images/1594-thread-dump.png" alt="img"></p><h2 id="代码定位和问题解决"><a href="#代码定位和问题解决" class="headerlink" title="代码定位和问题解决"></a>代码定位和问题解决</h2><p><img src="/images/payment-error-infinite-loop.png" alt="img"><br>最终安排人员修复问题..</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;   今天被运维告知线上payment项目CPU占用率极高的警告通知，让我们开发自己排查问题,然后开始了排查问题之旅…
    
    </summary>
    
    
      <category term="Java" scheme="http://blog.alinkeji.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>基于Redis封装分布式锁</title>
    <link href="http://blog.alinkeji.com/2018/06/15/%E5%9F%BA%E4%BA%8ERedis%E5%B0%81%E8%A3%85%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>http://blog.alinkeji.com/2018/06/15/基于Redis封装分布式锁/</id>
    <published>2018-06-15T02:24:04.000Z</published>
    <updated>2019-11-16T03:27:55.893Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基于Redis的分布式锁封装记录"><a href="#基于Redis的分布式锁封装记录" class="headerlink" title="基于Redis的分布式锁封装记录"></a>基于Redis的分布式锁封装记录</h3><ul><li>首先搭建一个基于Redis Server端（略过）</li><li>Redis客户端连接池工具类（RedisPool.java）的封装<a id="more"></a><ul><li>利用类的static块初始化连接池</li><li>初始化的参数包含最大连接数、最大空闲连接数、最小空闲连接数等基本参数<br><img src="https://upload-images.jianshu.io/upload_images/12666638-8f63f6d7efae78b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li></ul></li><li>初始化连接池时读取mvc.default.properties配置文件中的jedis-pool配置，该配置值格式为:host,port连接到redis中，后续项目中可配置此自定义</li><li>封装的加锁操作分为非阻塞锁和阻塞锁，阻塞锁下封装了自定义失效时间锁和默认失效时间（10s）锁<pre><code class="java">Jedis jedis = RedisPool.getJedis();String result = jedis.set(key, request, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);RedisPool.close(jedis);</code></pre></li><li>阻塞锁的实现基于for(;;)循环，防止Cpu一直消耗，在循环体内加入Thread.sleep()保证时间片切换<pre><code class="java"><span class="keyword">for</span> (;;) {Jedis jedis = RedisPool.getJedis();String result = jedis.set(key, request, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, <span class="number">10</span> * TIME);RedisPool.close(jedis);<span class="keyword">if</span> (LOCK_SUCCESS.equals(result)) { <span class="keyword">break</span>;}<span class="comment">// 防止一直消耗 CPU</span>Thread.sleep(<span class="number">100</span>);}</code></pre></li><li>释放锁时需要调用Lua脚本来完成，传统的释放锁会涉及get到资源，然后del掉，使用Java client语法操作两个步骤不能保障原子性，所以在此采用Lua脚本来保证get和del为原子操作<pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">unlock</span><span class="params">(String key, String request)</span> </span>{String script = <span class="string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span>;Jedis jedis = RedisPool.getJedis();Object result = jedis.eval(script, Collections.singletonList(key), Collections.singletonList(request));RedisPool.close(jedis);<span class="keyword">if</span> (RELEASE_SUCCESS.equals(result)) {  <span class="keyword">return</span> <span class="keyword">true</span>;}<span class="keyword">return</span> <span class="keyword">false</span>;}</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基于Redis的分布式锁封装记录&quot;&gt;&lt;a href=&quot;#基于Redis的分布式锁封装记录&quot; class=&quot;headerlink&quot; title=&quot;基于Redis的分布式锁封装记录&quot;&gt;&lt;/a&gt;基于Redis的分布式锁封装记录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先搭建一个基于Redis Server端（略过）&lt;/li&gt;
&lt;li&gt;Redis客户端连接池工具类（RedisPool.java）的封装
    
    </summary>
    
    
      <category term="Java、Redis" scheme="http://blog.alinkeji.com/tags/Java%E3%80%81Redis/"/>
    
  </entry>
  
  <entry>
    <title>后端学习笔记</title>
    <link href="http://blog.alinkeji.com/2017/07/06/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.alinkeji.com/2017/07/06/后端学习笔记/</id>
    <published>2017-07-06T01:57:21.000Z</published>
    <updated>2019-11-16T03:27:55.977Z</updated>
    
    <content type="html"><![CDATA[<p>主要记录日常工作中或学习中的一些心得笔记，可持续更新….<a id="more"></a></p><h1 id="Spring-Boot-阅读心得"><a href="#Spring-Boot-阅读心得" class="headerlink" title="Spring Boot 阅读心得"></a>Spring Boot 阅读心得</h1><ul><li>实例化构造方法时，先去初始化成员变量，且只初始化非static成员变量和有new 关键字的成员变量。初始化完成后再调用构造方法内部的代码。</li><li>String… 这种定义称为变长变量，可支持传入任意多个参数，可接收数组参数。</li><li>Arrays.asList()实现数组转换为List的功能，具体实现为：new ArrayList&lt;&gt;(数组参数)。</li></ul><h1 id="网络基础知识"><a href="#网络基础知识" class="headerlink" title="网络基础知识"></a>网络基础知识</h1><ul><li>HTTP是无链接无状态的</li><li>HTTP与服务器交互的四种模式：GET、POST、PUT、DELETE</li><li>URL全称为资源描述符</li><li>幂等，今天还是第一次听说这个词语，本意即：同一个URL多次请求返回同样的结果，get了。</li><li>GET请求收到长度限制，这个限制一般来源于浏览器</li><li>三次握手操作：</li><li>第一次 State：SYN_SEND，Client：SYN=1,seq=x ——&gt; Server </li><li>第二次 State:SYN_RCVD，Server: SYN=1,ACK=1,seq=y,ACKnum=x+1 ——&gt; Client </li><li>第三次 State:ESTABLISHED ，Client: ACK=1，ACKnum=y+1 ——&gt; Server</li></ul><h1 id="二叉树知识"><a href="#二叉树知识" class="headerlink" title="二叉树知识"></a>二叉树知识</h1><ul><li>第i层最多有2^(i-1)个节点</li><li>高度为k的二叉树其节点最多2^k-1</li><li>满二叉树，深度为k则节点数为2^k-1</li><li>完全二叉树：除最后一层以外，上面的为满二叉树，最后一层只缺少右边的若干结点</li><li>完全二叉树大堆：任意一个非终端节点元素&gt;=左儿子节点和右儿子节点</li><li>完全二叉树小堆：任意一个非终端节点元素&lt;=左儿子节点和右儿子节点</li></ul><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><ul><li><p>通常情况下，单例模式三个步骤：构造器私有化，声明私有静态变量，提供静态获取实例的方法</p></li><li><p>最基本的饿汉单例模式（两私一公），涉及线程安全问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Signleton</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Signleton instence = <span class="keyword">new</span> Signleton();</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Signleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Signleton <span class="title">getInstence</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> instence;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>懒汉和懒汉线程安全单例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignletonLazy</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SignletonLazy instence;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SignletonLazy</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 非线程安全</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SignletonLazy <span class="title">getInstence</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instence == <span class="keyword">null</span>)&#123;</span><br><span class="line">instence = <span class="keyword">new</span> SignletonLazy();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instence;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 线程安全，效率低下</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SignletonLazy <span class="title">getInstence</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instence == <span class="keyword">null</span>)&#123;</span><br><span class="line">instence = <span class="keyword">new</span> SignletonLazy();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instence;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双重校验锁（double checked locking）单例模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignletonDoubleCheck</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SignletonDoubleCheck instence;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SignletonDoubleCheck</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SignletonDoubleCheck <span class="title">getInstence</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instence == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (SignletonDoubleCheck.class) &#123;</span><br><span class="line"><span class="keyword">if</span>(instence == <span class="keyword">null</span>)&#123;</span><br><span class="line">instence = <span class="keyword">new</span> SignletonDoubleCheck();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instence;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>枚举单例（Enum Singleton）使用方式为：SignletonEnum signleton = SignletonEnum.INSTANCE 模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SignletonEnum &#123;</span><br><span class="line">INSTANCE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单例总结：一般单例都是五种写法。懒汉，恶汉，双重校验锁，枚举和静态内部类。</p></li></ul><h1 id="String-基础知识"><a href="#String-基础知识" class="headerlink" title="String 基础知识"></a>String 基础知识</h1><ul><li>String a = “hello”与String a = new String(“hello”)内存中的区别：</li><li>String a = “hello”如果常量池”hello”存在，则直接指向常量池的”hello”,如果没有则在常量池中生成”hello”字符串，并让a指向它</li><li>String a = new String(“hello”)总是生成一个String对象的引用</li><li>String的+操作与StringBuilder.append()并非总是差，如果String的+操作在编译时合并那么优于append()方法</li><li>对象存储于堆中，栈中只存储引用地址，而对于八种基础数据类型栈中直接存储的值而非引用</li></ul><h1 id="Integer-与equals"><a href="#Integer-与equals" class="headerlink" title="Integer ==与equals"></a>Integer ==与equals</h1><ul><li>当Integer定义的变量值范围：[-128,127]之间时可用==比较为true</li><li>当Integer值不在此范围内时，也必须使用equals来比较</li></ul><h1 id="Jvm基础知识"><a href="#Jvm基础知识" class="headerlink" title="Jvm基础知识"></a>Jvm基础知识</h1><ul><li>Jvm分为栈和堆两块区域，栈中存储的变量引用，堆上存储的实例化对象。栈是线程独占，所以线程被销毁，栈上的内存自然被回收，栈不在GC范围内</li><li>GC常用的算法：引用计数算法、可达性分析算法</li><li>对象是否“已死”算法——引用算法：实例化对象引用为0时则会被GC回收，然而会产生循环引用，永远得不到释放。</li><li>对象是否“已死”算法——可达性分析算法：通过GC Roots对象向下搜索并标记，未被标记的对象则为可被回收的对象。</li><li>GC算法——标记清除算法：被标记为可被回收的对象直接进行清除</li><li>GC算法——复制算法：将不用回收的内存复制到新的内存区域，然后清除掉连续的内存区域</li><li>Jvm堆中分为：新生代（GC复制算法）和老生代（GC标记压缩算法）。新生代分为：Eden空间、To Survivor空间、From Survivor空间</li><li>新对象实例化时通常在Eden空间</li><li>GC算法——标记压缩算法：对于被标记为可被回收的对象压缩到内存的一端，然后直接清除边界处的内存。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要记录日常工作中或学习中的一些心得笔记，可持续更新….
    
    </summary>
    
    
      <category term="Java" scheme="http://blog.alinkeji.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>理解HashMap的原理</title>
    <link href="http://blog.alinkeji.com/2017/07/04/%E7%90%86%E8%A7%A3HashMap%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>http://blog.alinkeji.com/2017/07/04/理解HashMap的原理/</id>
    <published>2017-07-04T03:32:57.000Z</published>
    <updated>2019-11-16T03:27:55.897Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>HashMap的底层实现是一个数组结构，数组中的每一项又是一个Map.Entry&lt;K,V&gt;,这个键值对持有下一个元素的引用，这就构成了链表结构，在初始化的时候会去初始化这个数组。</p></blockquote><p>从上面这段话本人的理解即是HashMap宏观上为数组结构，微观上为链表结构，将两者结合取其优点的一种数据结构。<br><a id="more"></a></p><p>Java基本结构：一个是数组，另外一个是链表结构</p><p>数组特性：</p><blockquote><p>寻址容易，插入和删除困难</p></blockquote><ul><li>确定其下标情况下查询的时间复杂度为O(1),因其为顺序存储，直接定位get即可。</li><li>不确定下标的情况下查询的时间复杂度为O(N),因需要进行循环对比得出其值。</li><li>插入的时间复杂度为O(N),需要循环将数组的位置一个一个移动。</li></ul><p>链表特性：</p><blockquote><p>寻址困难，插入和删除容易。</p></blockquote><ul><li>get时需循环链表进行对比，时间复杂度O(N)。因链表在内存中的存储是非连续的。</li><li>插入或删除的时候时间复杂度为O(1)，只需修改链表的引用即可。</li></ul><h1 id="HashMap实现原理分析"><a href="#HashMap实现原理分析" class="headerlink" title="HashMap实现原理分析"></a>HashMap实现原理分析</h1><blockquote><p>put操作时的主要是根据键（Key）来确定存储位置，其大致流程为：Key.hashCode() ——&gt; hash() ——&gt; indexFor() ——&gt; 存储下标。</p></blockquote><ul><li>key.hashCode()为返回对象的哈希码值。</li><li>hash()为一个经典的散列算法。</li><li>indexFor()通过此函数对数组的长度取模运算，保证得出的存储位置在数组下标内。</li><li>在进行addEntry()操作的过程中会自动对map进行扩容操作，扩容条件为发生哈希冲突且Entry.length&gt;数组大小（默认2^4）*临界阈值(0.75)的时候。</li><li>发生哈希冲突时通过equals比较Entry.key,返回true时，仅覆盖原有Entry.key的value值，返回false时，新添加的Enter与原Entry形成Entry链，且总是位于Entry的头部</li></ul><blockquote><p>get()操作同理，根据键（key）确定其数组的存储下标,根据下标确定其Entry链表中某Entry对象，返回Entry.value值。</p></blockquote><ul><li>key为null时获取数组位置0上的Entry。</li><li>获取key.hashCode——&gt;hash()——&gt;indexFor()——&gt;取得数组下标indexOf。</li><li>根据数组特性获取数组下标值为indexOf的Entry链表。</li><li>循环Entry链表，比较其hash(key.hashCode)值且利用equals或==方法比较其key，返回其Entry.value。</li></ul><blockquote><p>链地址法解决Hash冲突。基本思想：为每个Hash值建立一个链表，当发生冲突时，将记录插入到链表中的头部</p></blockquote><p>终于通过大牛们的讲解和自己的理解大致体会了其HashMap的实现原理，精髓所在。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;HashMap的底层实现是一个数组结构，数组中的每一项又是一个Map.Entry&amp;lt;K,V&amp;gt;,这个键值对持有下一个元素的引用，这就构成了链表结构，在初始化的时候会去初始化这个数组。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从上面这段话本人的理解即是HashMap宏观上为数组结构，微观上为链表结构，将两者结合取其优点的一种数据结构。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://blog.alinkeji.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>聊聊我所理解的MVC</title>
    <link href="http://blog.alinkeji.com/2017/06/28/%E8%81%8A%E8%81%8A%E6%88%91%E6%89%80%E7%90%86%E8%A7%A3%E7%9A%84MVC/"/>
    <id>http://blog.alinkeji.com/2017/06/28/聊聊我所理解的MVC/</id>
    <published>2017-06-28T00:16:13.000Z</published>
    <updated>2019-11-16T03:27:56.181Z</updated>
    
    <content type="html"><![CDATA[<p>做开发也将近两年多了，平时里我们经常会用到项目架构上使用MVC的构造，那我们在使用此模式的同时又是否真正理解了呢？你说理解的和我的又是否一样呢？<a id="more"></a></p><blockquote><p>MVC全称即Model View Controller。我将如下解释各个的含义。</p></blockquote><h1 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h1><p>   Model包含的即是我们开发中所定义的Java Bean或者一些业务逻辑代码的统称，从细致的结构看Model又包含了三层：业务逻辑的代码处理、Java Bean相关代码的封装、数据库Dao层调用的相关代码。</p><h1 id="View"><a href="#View" class="headerlink" title="View"></a>View</h1><p>   View就非常好理解了，从字面意义上来看叫视图的意思，其实就是和用户进行交互的界面（比如我们平时逛淘宝所看到的网站）View的呈现是靠Html+Css+Js来完成整个渲染。所以从本质上又可以将View划分为一种MVC、MVVM的构造模式，本篇文章就不详解了，后面我们再来TO DO……</p><h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><p>   字面意思“控制器”很形象了，Controller在架构层面上属于核心存在的一个模块，负责将前端Request请求接受处理并调用相应的Model后将结果集返回给View，就相当于我们大脑的处理调度中心，和电脑的Cpu处理器有异曲同工之妙。</p><h1 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h1><p>   本人通过阅读SpringMVC和Struts2源码，写了一个轻巧版的 <a href="https://github.com/linrol/RollinMvc" target="_blank" rel="noopener">RollinMvc</a>在github上，下篇文章我将详细给大家分析RollinMvc的结构及原理，源码可直接下载使用，欢迎大牛帮我提意见。</p><ul><li>GitHub: <a href="https://github.com/linrol/" target="_blank" rel="noopener">linrol</a></li><li>Email: <a href="mailto:18883754124@gmail.com" target="_blank" rel="noopener">18883754124@gmail.com</a></li><li>Telephone: 18883754124)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做开发也将近两年多了，平时里我们经常会用到项目架构上使用MVC的构造，那我们在使用此模式的同时又是否真正理解了呢？你说理解的和我的又是否一样呢？
    
    </summary>
    
    
      <category term="Java" scheme="http://blog.alinkeji.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>纪念毕业那段青春年华</title>
    <link href="http://blog.alinkeji.com/2017/06/26/%E7%BA%AA%E5%BF%B5%E6%AF%95%E4%B8%9A%E9%82%A3%E6%AE%B5%E9%9D%92%E6%98%A5%E5%B9%B4%E5%8D%8E/"/>
    <id>http://blog.alinkeji.com/2017/06/26/纪念毕业那段青春年华/</id>
    <published>2017-06-26T12:57:38.000Z</published>
    <updated>2019-11-16T03:27:56.005Z</updated>
    
    <content type="html"><![CDATA[<p>前两天，回学校办理了毕业离校手续，没有想象中的轰轰烈烈，也没有想象中的悲伤离别的场景，很平淡，平淡到自己无法想象…<br><a id="more"></a><br>一晃眼的瞬间，四年就这么过了，拿证当晚和明哥出去喝了点小酒，本来那两天心情挺沉闷的，想找个人倾诉倾诉憋屈了很久的心里话<br><br>本来想了很多的话突然就不知道该怎么说了，明哥也许是看出了我的心思，告诉我慢慢沉淀，不要急功近利，真是一语点破梦中人，原来是我最近太浮躁了<br><br>好了，毕业了，发几张照片留作毕业纪念吧<br><img src="/images/毕业照.jpg" alt="img"><br><img src="/images/老协文化聘书.jpg" alt="img"><br><img src="/images/腾讯创业大赛.jpg" alt="img"><br><img src="/images/毕业证书.jpg" alt="img"><br><img src="/images/学位证.jpg" alt="img"><br><img src="/images/汇总.jpg" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两天，回学校办理了毕业离校手续，没有想象中的轰轰烈烈，也没有想象中的悲伤离别的场景，很平淡，平淡到自己无法想象…&lt;br&gt;
    
    </summary>
    
    
      <category term="毕业那点小事儿" scheme="http://blog.alinkeji.com/tags/%E6%AF%95%E4%B8%9A%E9%82%A3%E7%82%B9%E5%B0%8F%E4%BA%8B%E5%84%BF/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建第一天</title>
    <link href="http://blog.alinkeji.com/2017/06/25/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <id>http://blog.alinkeji.com/2017/06/25/博客搭建第一天/</id>
    <published>2017-06-25T14:37:01.000Z</published>
    <updated>2019-11-16T03:27:56.237Z</updated>
    
    <content type="html"><![CDATA[<p>今天，2017年6月25日搭建了Hexo的博客地址，以后生命中的每一天要坚持写下每天的事情。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天，2017年6月25日搭建了Hexo的博客地址，以后生命中的每一天要坚持写下每天的事情。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="个人日记" scheme="http://blog.alinkeji.com/tags/%E4%B8%AA%E4%BA%BA%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
</feed>
