<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[记一次线上服务器CPU占用率极高的排查过程]]></title>
    <url>%2F2018%2F09%2F22%2F%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8A%E6%9C%8D%E5%8A%A1%E5%99%A8CPU%E5%8D%A0%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E7%9A%84%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[背景 今天被运维告知线上payment项目CPU占用率极高的警告通知，让我们开发自己排查问题,然后开始了排查问题之旅… 解决步骤进程和线程追踪 执行top命令按CPU占用率排序，得到进程PID，如下图，PS:此图为下来的模拟场景所以CPU占用率并不高，实际线上查出来的进程PID为16485 根据进程PID查找最消耗CPU的线程PID为1594 1top -Hp pid 分析dump文件 执行以下命令获取thread dump文件 1./jstack 1594 -&gt; 1594-dump.log 将线程追踪步骤查出的PID十进制1594转为十六进制的线程PID 63a,查找1594-dump.log线程堆栈信息，最终追踪到具体的业务位置 代码定位和问题解决最终安排人员修复问题..]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于Redis封装分布式锁]]></title>
    <url>%2F2018%2F06%2F15%2F%E5%9F%BA%E4%BA%8ERedis%E5%B0%81%E8%A3%85%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%2F</url>
    <content type="text"><![CDATA[基于Redis的分布式锁封装记录 首先搭建一个基于Redis Server端（略过） Redis客户端连接池工具类（RedisPool.java）的封装 利用类的static块初始化连接池 初始化的参数包含最大连接数、最大空闲连接数、最小空闲连接数等基本参数 初始化连接池时读取mvc.default.properties配置文件中的jedis-pool配置，该配置值格式为:host,port连接到redis中，后续项目中可配置此自定义 封装的加锁操作分为非阻塞锁和阻塞锁，阻塞锁下封装了自定义失效时间锁和默认失效时间（10s）锁Jedis jedis = RedisPool.getJedis(); String result = jedis.set(key, request, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime); RedisPool.close(jedis); 阻塞锁的实现基于for(;;)循环，防止Cpu一直消耗，在循环体内加入Thread.sleep()保证时间片切换for (;;) { Jedis jedis = RedisPool.getJedis(); String result = jedis.set(key, request, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, 10 * TIME); RedisPool.close(jedis); if (LOCK_SUCCESS.equals(result)) { break; } // 防止一直消耗 CPU Thread.sleep(100); } 释放锁时需要调用Lua脚本来完成，传统的释放锁会涉及get到资源，然后del掉，使用Java client语法操作两个步骤不能保障原子性，所以在此采用Lua脚本来保证get和del为原子操作public static boolean unlock(String key, String request) { String script = "if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"; Jedis jedis = RedisPool.getJedis(); Object result = jedis.eval(script, Collections.singletonList(key), Collections.singletonList(request)); RedisPool.close(jedis); if (RELEASE_SUCCESS.equals(result)) { return true; } return false; }]]></content>
      <tags>
        <tag>Java、Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[后端学习笔记]]></title>
    <url>%2F2017%2F07%2F06%2F%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[主要记录日常工作中或学习中的一些心得笔记，可持续更新…. Spring Boot 阅读心得 实例化构造方法时，先去初始化成员变量，且只初始化非static成员变量和有new 关键字的成员变量。初始化完成后再调用构造方法内部的代码。 String… 这种定义称为变长变量，可支持传入任意多个参数，可接收数组参数。 Arrays.asList()实现数组转换为List的功能，具体实现为：new ArrayList&lt;&gt;(数组参数)。 网络基础知识 HTTP是无链接无状态的 HTTP与服务器交互的四种模式：GET、POST、PUT、DELETE URL全称为资源描述符 幂等，今天还是第一次听说这个词语，本意即：同一个URL多次请求返回同样的结果，get了。 GET请求收到长度限制，这个限制一般来源于浏览器 三次握手操作： 第一次 State：SYN_SEND，Client：SYN=1,seq=x ——&gt; Server 第二次 State:SYN_RCVD，Server: SYN=1,ACK=1,seq=y,ACKnum=x+1 ——&gt; Client 第三次 State:ESTABLISHED ，Client: ACK=1，ACKnum=y+1 ——&gt; Server 二叉树知识 第i层最多有2^(i-1)个节点 高度为k的二叉树其节点最多2^k-1 满二叉树，深度为k则节点数为2^k-1 完全二叉树：除最后一层以外，上面的为满二叉树，最后一层只缺少右边的若干结点 完全二叉树大堆：任意一个非终端节点元素&gt;=左儿子节点和右儿子节点 完全二叉树小堆：任意一个非终端节点元素&lt;=左儿子节点和右儿子节点 单例模式 通常情况下，单例模式三个步骤：构造器私有化，声明私有静态变量，提供静态获取实例的方法 最基本的饿汉单例模式（两私一公），涉及线程安全问题。 12345678public class Signleton&#123; private static Signleton instence = new Signleton(); private Signleton()&#123; &#125;; public static Signleton getInstence()&#123; return instence; &#125; &#125; 懒汉和懒汉线程安全单例如下： 12345678910111213141516171819public class SignletonLazy &#123; private static SignletonLazy instence; private SignletonLazy()&#123; &#125;; // 非线程安全 public static SignletonLazy getInstence()&#123; if(instence == null)&#123; instence = new SignletonLazy(); &#125; return instence; &#125; // 线程安全，效率低下 public static synchronized SignletonLazy getInstence()&#123; if(instence == null)&#123; instence = new SignletonLazy(); &#125; return instence; &#125;&#125; 双重校验锁（double checked locking）单例模式： 123456789101112131415public class SignletonDoubleCheck &#123; private static SignletonDoubleCheck instence; private SignletonDoubleCheck()&#123; &#125;; public static SignletonDoubleCheck getInstence()&#123; if(instence == null)&#123; synchronized (SignletonDoubleCheck.class) &#123; if(instence == null)&#123; instence = new SignletonDoubleCheck(); &#125; &#125; &#125; return instence; &#125;&#125; 枚举单例（Enum Singleton）使用方式为：SignletonEnum signleton = SignletonEnum.INSTANCE 模式： 123public enum SignletonEnum &#123; INSTANCE&#125; 单例总结：一般单例都是五种写法。懒汉，恶汉，双重校验锁，枚举和静态内部类。 String 基础知识 String a = “hello”与String a = new String(“hello”)内存中的区别： String a = “hello”如果常量池”hello”存在，则直接指向常量池的”hello”,如果没有则在常量池中生成”hello”字符串，并让a指向它 String a = new String(“hello”)总是生成一个String对象的引用 String的+操作与StringBuilder.append()并非总是差，如果String的+操作在编译时合并那么优于append()方法 对象存储于堆中，栈中只存储引用地址，而对于八种基础数据类型栈中直接存储的值而非引用 Integer ==与equals 当Integer定义的变量值范围：[-128,127]之间时可用==比较为true 当Integer值不在此范围内时，也必须使用equals来比较 Jvm基础知识 Jvm分为栈和堆两块区域，栈中存储的变量引用，堆上存储的实例化对象。栈是线程独占，所以线程被销毁，栈上的内存自然被回收，栈不在GC范围内 GC常用的算法：引用计数算法、可达性分析算法 对象是否“已死”算法——引用算法：实例化对象引用为0时则会被GC回收，然而会产生循环引用，永远得不到释放。 对象是否“已死”算法——可达性分析算法：通过GC Roots对象向下搜索并标记，未被标记的对象则为可被回收的对象。 GC算法——标记清除算法：被标记为可被回收的对象直接进行清除 GC算法——复制算法：将不用回收的内存复制到新的内存区域，然后清除掉连续的内存区域 Jvm堆中分为：新生代（GC复制算法）和老生代（GC标记压缩算法）。新生代分为：Eden空间、To Survivor空间、From Survivor空间 新对象实例化时通常在Eden空间 GC算法——标记压缩算法：对于被标记为可被回收的对象压缩到内存的一端，然后直接清除边界处的内存。]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[理解HashMap的原理]]></title>
    <url>%2F2017%2F07%2F04%2F%E7%90%86%E8%A7%A3HashMap%E7%9A%84%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[HashMap的底层实现是一个数组结构，数组中的每一项又是一个Map.Entry&lt;K,V&gt;,这个键值对持有下一个元素的引用，这就构成了链表结构，在初始化的时候会去初始化这个数组。 从上面这段话本人的理解即是HashMap宏观上为数组结构，微观上为链表结构，将两者结合取其优点的一种数据结构。 Java基本结构：一个是数组，另外一个是链表结构 数组特性： 寻址容易，插入和删除困难 确定其下标情况下查询的时间复杂度为O(1),因其为顺序存储，直接定位get即可。 不确定下标的情况下查询的时间复杂度为O(N),因需要进行循环对比得出其值。 插入的时间复杂度为O(N),需要循环将数组的位置一个一个移动。 链表特性： 寻址困难，插入和删除容易。 get时需循环链表进行对比，时间复杂度O(N)。因链表在内存中的存储是非连续的。 插入或删除的时候时间复杂度为O(1)，只需修改链表的引用即可。 HashMap实现原理分析 put操作时的主要是根据键（Key）来确定存储位置，其大致流程为：Key.hashCode() ——&gt; hash() ——&gt; indexFor() ——&gt; 存储下标。 key.hashCode()为返回对象的哈希码值。 hash()为一个经典的散列算法。 indexFor()通过此函数对数组的长度取模运算，保证得出的存储位置在数组下标内。 在进行addEntry()操作的过程中会自动对map进行扩容操作，扩容条件为发生哈希冲突且Entry.length&gt;数组大小（默认2^4）*临界阈值(0.75)的时候。 发生哈希冲突时通过equals比较Entry.key,返回true时，仅覆盖原有Entry.key的value值，返回false时，新添加的Enter与原Entry形成Entry链，且总是位于Entry的头部 get()操作同理，根据键（key）确定其数组的存储下标,根据下标确定其Entry链表中某Entry对象，返回Entry.value值。 key为null时获取数组位置0上的Entry。 获取key.hashCode——&gt;hash()——&gt;indexFor()——&gt;取得数组下标indexOf。 根据数组特性获取数组下标值为indexOf的Entry链表。 循环Entry链表，比较其hash(key.hashCode)值且利用equals或==方法比较其key，返回其Entry.value。 链地址法解决Hash冲突。基本思想：为每个Hash值建立一个链表，当发生冲突时，将记录插入到链表中的头部 终于通过大牛们的讲解和自己的理解大致体会了其HashMap的实现原理，精髓所在。]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[聊聊我所理解的MVC]]></title>
    <url>%2F2017%2F06%2F28%2F%E8%81%8A%E8%81%8A%E6%88%91%E6%89%80%E7%90%86%E8%A7%A3%E7%9A%84MVC%2F</url>
    <content type="text"><![CDATA[做开发也将近两年多了，平时里我们经常会用到项目架构上使用MVC的构造，那我们在使用此模式的同时又是否真正理解了呢？你说理解的和我的又是否一样呢？ MVC全称即Model View Controller。我将如下解释各个的含义。 Model Model包含的即是我们开发中所定义的Java Bean或者一些业务逻辑代码的统称，从细致的结构看Model又包含了三层：业务逻辑的代码处理、Java Bean相关代码的封装、数据库Dao层调用的相关代码。 View View就非常好理解了，从字面意义上来看叫视图的意思，其实就是和用户进行交互的界面（比如我们平时逛淘宝所看到的网站）View的呈现是靠Html+Css+Js来完成整个渲染。所以从本质上又可以将View划分为一种MVC、MVVM的构造模式，本篇文章就不详解了，后面我们再来TO DO…… Controller 字面意思“控制器”很形象了，Controller在架构层面上属于核心存在的一个模块，负责将前端Request请求接受处理并调用相应的Model后将结果集返回给View，就相当于我们大脑的处理调度中心，和电脑的Cpu处理器有异曲同工之妙。 Link 本人通过阅读SpringMVC和Struts2源码，写了一个轻巧版的 RollinMvc在github上，下篇文章我将详细给大家分析RollinMvc的结构及原理，源码可直接下载使用，欢迎大牛帮我提意见。 GitHub: linrol Email: 18883754124@gmail.com Telephone: 18883754124)]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[纪念毕业那段青春年华]]></title>
    <url>%2F2017%2F06%2F26%2F%E7%BA%AA%E5%BF%B5%E6%AF%95%E4%B8%9A%E9%82%A3%E6%AE%B5%E9%9D%92%E6%98%A5%E5%B9%B4%E5%8D%8E%2F</url>
    <content type="text"><![CDATA[前两天，回学校办理了毕业离校手续，没有想象中的轰轰烈烈，也没有想象中的悲伤离别的场景，很平淡，平淡到自己无法想象…一晃眼的瞬间，四年就这么过了，拿证当晚和明哥出去喝了点小酒，本来那两天心情挺沉闷的，想找个人倾诉倾诉憋屈了很久的心里话本来想了很多的话突然就不知道该怎么说了，明哥也许是看出了我的心思，告诉我慢慢沉淀，不要急功近利，真是一语点破梦中人，原来是我最近太浮躁了好了，毕业了，发几张照片留作毕业纪念吧]]></content>
      <tags>
        <tag>毕业那点小事儿</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客搭建第一天]]></title>
    <url>%2F2017%2F06%2F25%2F%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%AC%AC%E4%B8%80%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[今天，2017年6月25日搭建了Hexo的博客地址，以后生命中的每一天要坚持写下每天的事情。]]></content>
      <tags>
        <tag>个人日记</tag>
      </tags>
  </entry>
</search>
